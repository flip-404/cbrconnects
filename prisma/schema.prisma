generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               Int      @id @default(autoincrement())
  email            String   @unique
  userName         String
  userAuthId       String   @unique
  userGroup        String   @default("User")
  nickname         String   @unique
  password         String
  gender           String
  dateOfBirth      DateTime
  registrationDate DateTime @default(now())
  authType         String
  kakaoId          String?  @unique
  googleId         String?  @unique
  profileImage     String?

  posts       Post[]
  comments    Comment[]
  likes       PostLike[]
  CommentLike CommentLike[]
}

model Post {
  id             Int          @id @default(autoincrement())
  title          String
  content        String
  viewCount      Int          @default(0)
  isNotice       Boolean      @default(false)
  mainCategory   MainCategory
  subCategory    SubCategory?
  thumbnail      String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  searchTitle    String       @map("search_title")
  searchContent  String       @map("search_content")
  searchFullText String       @map("search_full_text")

  authorId Int
  author   User       @relation(fields: [authorId], references: [id])
  comments Comment[]
  likes    PostLike[]

  @@index([mainCategory, subCategory])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId Int
  author   User @relation(fields: [authorId], references: [id])

  postId Int
  post   Post @relation(fields: [postId], references: [id])

  parentId Int?
  parent   Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentToComment")

  likes CommentLike[]

  @@index([postId])
}

model PostLike {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  postId Int
  post   Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model CommentLike {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])
}

enum MainCategory {
  community
  job
  market
  rentshare
}

enum SubCategory {
  notification
  event
  freeboard
  club
  news
  yesmigration
  parcel
  business
  offer
  search
  rent
  share
}
